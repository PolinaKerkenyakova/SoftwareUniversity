Trivial cases
1. All 'bad' exit conditions - 'throws' and 'returns' for special values signifying work could not be done
     ...1 test for each check leading to such a condition
2. All 'good' exit condition - where the function received correct values and managed to complete its work
     2.a Some simple correct values we can think of - it's a good idea to check with at least 2 different   
         values so we don't fall for default return values
     2.b Edge cases:
         2.b.1 Edge cases that come from the data type we're using for example for Numbers - integers,
         floating point numbers, positive, negative, NaN, numbers above max allowed values etc. Alternatively for arrays it could be
         an empty array, an array with 1 element or an array with many elements
         2.b.2 Edge cases that come from the specification for example using a number as an index -
         check it's an Integer, check it's >= 0, check it's < length of whatever we should search in

Non Trivial Cases
3. Check the source code to ensure we have full code coverage - that we have tests checking every row and
expression/statement in that row i.e. line coverage
4. Non-trivial Edge cases - for every statement/expression try to think of a way it can be implemented to work
almost correctly, this will let us think of non-standard edge cases to test
For example if we're asked to check if something is a number, the correct check might be
typeof num === 'number', but someone could write it as !isNaN(Number(num)) which would introduce
edge cases with invalid logic, write tests to differentiate the correct implementation from the almost correct one